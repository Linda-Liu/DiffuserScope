function u = wavefront_spherical(A, lambda, medium_index, L, M, x, y, z, usegpu)
% WAVEFRONT_SPHERICAL  Generate a wavefront from a spherical emitter
%
% Compute the spherical wavefront generated by a point source emitter at
% (x,y,z) intersecting the principal plane.
% A: amplitude
% lambda: wavelength
% L: Simulation size in object space(meters)
% M: Number of pixels in simulation 

% Note: the paraxial approximation is NOT used here, but can be
% uncommented below for testing.

  dx = L/M;
  if usegpu
      x_ticks=gpuArray(-L/2+dx/2:dx:L/2-dx/2);
  else
      x_ticks=(-L/2+dx/2:dx:L/2-dx/2);
  end
  [X,Y]=meshgrid(x_ticks-x,x_ticks-y);
  r = sqrt(z^2+X.^2+Y.^2);  
  
  k = medium_index * 2 * pi / lambda;
  u = A./r.*exp(-sign(z)*1i*k.*r);
  
  if z==inf || z==-inf
      u = ones([M,M])* A;
  end

  % Uncomment to enable paraxial approximation(r=sqrt(z^2+X.^2+Y.^2)~z+(X.^2+Y.^2)/2z)
  % u = A./z.* exp(-j * k / (2 * z) * (X.^2 + Y.^2));

end